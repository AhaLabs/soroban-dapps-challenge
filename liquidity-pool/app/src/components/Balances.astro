---
import Card from './Card.astro'
import usdc from '../img/usdc.svg'
import btc from '../img/btc.svg'
import lp from '../img/lp.svg'
---

<Card title="Balances">
  <nav>
    <div>
      <h3>
        <img src={usdc.src} alt="" />
        USDC
      </h3>
      <span class="balance" id="balance-usdc" aria-live="polite">-</span>
      <small>
        <button disabled aria-controls="balance-usdc" data-mint-usdc>Mint</button>
      </small>
    </div>
    <div>
      <h3>
        <img src={btc.src} alt="" />
        BTC
      </h3>
      <span class="balance" id="balance-btc" aria-live="polite">-</span>
      <small>
        <button disabled aria-controls="balance-btc" data-mint-btc>Mint</button>
      </small>
    </div>
    <div>
      <h3>
        <img src={lp.src} alt="" />
        LP
      </h3>
      <span class="balance" data-balance-share>-</span>
    </div>
  </nav>
</Card>

<style>
  nav {
    display: grid;
    gap: 0.5em;
    grid-template-columns: auto minmax(75px, 1fr) auto;
    font-size: 0.8em;
    align-items: center;
  }
  nav > div {
    display: contents;
  }
  nav > div > *:nth-child(-n+2) {
    border-bottom: 1px dotted transparent;
  }
  nav > div:hover > * {
    border-color: var(--shadow);
  }
  .balance {
    text-align: right;
  }
  h3 {
    font-size: 1em;
    margin: 0;
  }
  img {
    width: 20px;
    display: inline;
    vertical-align: bottom;
  }
</style>

<script>
  import { Address, usdc, btc, shareToken } from '../contracts'
  import * as wallet from '../wallet'
  import { formatBalance } from '../util'

  const balanceUsdc = document.querySelector('#balance-usdc')
  const balanceBtc = document.querySelector('#balance-btc')
  const balanceShare = document.querySelector('[data-balance-share]')

  wallet.onChange(async ({ account, isSignedIn }) => {
    if (!isSignedIn) {
      mintUsdc.disabled = true
      mintBtc.disabled = true
    } else {
      if (!mintUsdc.classList.contains('loading')) mintUsdc.disabled = false
      if (!mintBtc.classList.contains('loading')) mintBtc.disabled = false
      await updateBalances(account)
    }
  })

  async function updateBalances(account) {
    const address = new Address(account)
    const [usdcBalance, btcBalance, shareBalance] = await Promise.all([
      usdc.balance({ id: address }),
      btc.balance({ id: address }),
      shareToken.balance({ id: address }),
    ])
    balanceUsdc.innerHTML = formatBalance(usdcBalance, 7)
    balanceBtc.innerHTML = formatBalance(btcBalance, 7)
    balanceShare.innerHTML = formatBalance(shareBalance, 7)
  }

  const mintUsdc = document.querySelector('[data-mint-usdc]')
  const mintBtc = document.querySelector('[data-mint-btc]')

  mintUsdc.addEventListener('click', async () => {
    await mint(usdc.mint, mintUsdc, 100000)
  })
  
  mintBtc.addEventListener('click', async () => {
    await mint(btc.mint, mintBtc, 5)
  })

  async function mint(mintFn, button, amount = 100) {
    const { account, isSignedIn } = wallet.getState()
    if (!isSignedIn) return

    const address = new Address(account)
    button.disabled = true
    button.classList.add('loading')
    await mintFn({ to: address, amount: BigInt(amount * 10**7) })
    button.disabled = false
    button.classList.remove('loading')
    await updateBalances(account)
  }
</script>

